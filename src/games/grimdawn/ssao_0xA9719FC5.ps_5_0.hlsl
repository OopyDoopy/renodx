// ---- Created with 3Dmigoto v1.3.16 on Tue Feb 11 16:28:16 2025

cbuffer heynottoorough : register(b0)
{
  float dofDistance : packoffset(c0);
  float dofRange : packoffset(c0.y);
  float brightnessAdjustment : packoffset(c0.z);
  float contrastAdjustment : packoffset(c0.w);
  float saturationAdjustment : packoffset(c1);
  float farClipDist : packoffset(c1.y);
  float ssaoStrength : packoffset(c1.z);
  float ssaoScale : packoffset(c1.w);
  float saturation : packoffset(c2);
  float windStrength : packoffset(c2.y);
  float bladeHeight : packoffset(c2.z);
  float highlight : packoffset(c2.w);
  float zNear : packoffset(c3);
  float zFar : packoffset(c3.y);
  float outlineThickness : packoffset(c3.z);
  float blendedGlobalFadeFactor : packoffset(c3.w);
  float iceyAlphaMultiplier : packoffset(c4);
  float iceyFactor : packoffset(c4.y);
  float dissolveValue : packoffset(c4.z);
  float rate : packoffset(c4.w);
  float offset : packoffset(c5);
  float minScale : packoffset(c5.y);
  float maxScale : packoffset(c5.z);
  float invBlockSize : packoffset(c5.w);
  float dShadowBias : packoffset(c6);
  float pShadowBias : packoffset(c6.y);
  float ambientIntensity : packoffset(c6.z);
  float rimLight : packoffset(c6.w);
  float xRippleAmplitude : packoffset(c7);
  float yRippleAmplitude : packoffset(c7.y);
  float zRippleAmplitude : packoffset(c7.z);
  float filmThickness : packoffset(c7.w);
  float normalPush : packoffset(c8);
  float fresnelAmount : packoffset(c8.y);
  float distortion : packoffset(c8.z);
  float tint : packoffset(c8.w);
  float dSpecularIntensity : packoffset(c9);
  float pSpecularIntensity : packoffset(c9.y);
  float specularIntensity : packoffset(c9.z);
  float xColorScrollSpeed : packoffset(c9.w);
  float yColorScrollSpeed : packoffset(c10);
  float xAlphaScrollSpeed : packoffset(c10.y);
  float yAlphaScrollSpeed : packoffset(c10.z);
  float smoothness : packoffset(c10.w);
  float maxDepth : packoffset(c11);
  float textureScroll : packoffset(c11.y);
  float2 screenSize : packoffset(c11.z);
  float2 scrollRate : packoffset(c12);
  float2 bumpScrollRate : packoffset(c12.z);
  float2 colorScrollSpeed : packoffset(c13);
  float2 alphaScrollSpeed : packoffset(c13.z);
  float2 scrollDiffuse1 : packoffset(c14);
  float2 scrollAlpha1 : packoffset(c14.z);
  float2 scrollBump : packoffset(c15);
  float2 scrollDiffuse2 : packoffset(c15.z);
  float2 scrollRate1 : packoffset(c16);
  float2 scrollRate2 : packoffset(c16.z);
  float2 screenTextureScale : packoffset(c17);
  float2 sampleOffset0 : packoffset(c17.z);
  float2 sampleOffset1 : packoffset(c18);
  float2 sampleOffset2 : packoffset(c18.z);
  float2 sampleOffset3 : packoffset(c19);
  float2 sampleOffset4 : packoffset(c19.z);
  float2 sampleOffset5 : packoffset(c20);
  float2 sampleOffset6 : packoffset(c20.z);
  float2 sampleOffset7 : packoffset(c21);
  float2 pixelSize : packoffset(c21.z);
  float2 planes : packoffset(c22);
  float2 invNoiseTexSize : packoffset(c22.z);
  float2 textureDirection : packoffset(c23);
  float2 textureOffset : packoffset(c23.z);
  float2 invViewportSize : packoffset(c24);
  float3 red : packoffset(c25);
  float3 green : packoffset(c26);
  float3 blue : packoffset(c27);
  float3 surfaceParams : packoffset(c28);
  float3 waterColor : packoffset(c29);
  float3 surfaceNormal : packoffset(c30);
  float3 waveColor : packoffset(c31);
  float3 opaqueColor : packoffset(c32);
  float3 upVector : packoffset(c33);
  float3 terrainOffset : packoffset(c34);
  float3 terrainMapColor : packoffset(c35);
  float3 regionToSceneOffset : packoffset(c36);
  float3 dissolveColor : packoffset(c37);
  float3 ambientColor : packoffset(c38);
  float3 velocity : packoffset(c39);
  float3 cameraDirection : packoffset(c40);
  float3 depthFogParams : packoffset(c41);
  float3 heightFogParams : packoffset(c42);
  float3 fogColor : packoffset(c43);
  float3 lightDirection : packoffset(c44);
  float4 transparencyValue : packoffset(c45);
  float4 outlineColor : packoffset(c46);
  float4 extractConst : packoffset(c47);
  float4 sampleWeight0 : packoffset(c48);
  float4 sampleWeight1 : packoffset(c49);
  float4 blendFactor : packoffset(c50);
  float4 level : packoffset(c51);
  float4 depthParams : packoffset(c52);
  float4 textureScale : packoffset(c53);
  float4x4 worldToScreenMatrix : packoffset(c54);
  float4x4 clipToViewSpaceMatrix : packoffset(c58);
  float4x4 worldToObjectMatrix : packoffset(c62);
  float4 clipPlane : packoffset(c66);
  float4 terrainParams : packoffset(c67);
}

SamplerState depthSampler_s : register(s0);
SamplerState rotationSampler_s : register(s1);
Texture2D<float4> depthSampler : register(t0);
Texture2D<float4> rotationSampler : register(t1);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = screenSize.xy * v1.xy;
  r0.xy = float2(0.25,0.25) * r0.xy;
  r0.xyz = rotationSampler.Sample(rotationSampler_s, r0.xy).xyz;
  r0.xyz = float3(-0.5,-0.5,-0.5) + r0.xyz;
  r0.xyz = r0.xyz + r0.xyz;
  r0.w = dot(float3(0.527836978,-0.085868001,0.527836978), r0.xyz);
  r0.w = r0.w + r0.w;
  r1.xy = r0.xy * -r0.ww + float2(0.527836978,-0.085868001);
  r1.xy = r1.xy * ssaoScale + v1.xy;
  r0.w = depthSampler.Sample(depthSampler_s, r1.xy).x;
  r0.w = r0.w * 2 + -1;
  r1.x = zFar + -zNear;
  r1.yz = zNear + zNear;
  r0.w = -r0.w * r1.x + r1.z;
  r0.w = r1.y / r0.w;
  r1.w = depthSampler.Sample(depthSampler_s, v1.xy).x;
  r1.w = r1.w * 2 + -1;
  r1.w = -r1.w * r1.x + r1.z;
  r1.w = r1.y / r1.w;
  r2.x = -r1.w + r0.w;
  r0.w = cmp(r1.w < r0.w);
  r2.x = 12 * abs(r2.x);
  r2.x = min(1, r2.x);
  r2.x = 1 + -r2.x;
  r0.w = r0.w ? r2.x : 0;
  r2.x = dot(float3(-0.0400880016,0.536086977,-0.0400880016), r0.xyz);
  r2.x = r2.x + r2.x;
  r2.xy = r0.xy * -r2.xx + float2(-0.0400880016,0.536086977);
  r2.xy = r2.xy * ssaoScale + v1.xy;
  r2.x = depthSampler.Sample(depthSampler_s, r2.xy).x;
  r2.x = r2.x * 2 + -1;
  r2.x = -r2.x * r1.x + r1.z;
  r2.x = r1.y / r2.x;
  r2.y = r2.x + -r1.w;
  r2.x = cmp(r1.w < r2.x);
  r2.y = 12 * abs(r2.y);
  r2.y = min(1, r2.y);
  r2.y = 1 + -r2.y;
  r2.x = r2.x ? r2.y : 0;
  r0.w = r2.x + r0.w;
  r2.x = dot(float3(-0.670445025,-0.179949,-0.670445025), r0.xyz);
  r2.x = r2.x + r2.x;
  r2.xy = r0.xy * -r2.xx + float2(-0.670445025,-0.179949);
  r2.xy = r2.xy * ssaoScale + v1.xy;
  r2.x = depthSampler.Sample(depthSampler_s, r2.xy).x;
  r2.x = r2.x * 2 + -1;
  r2.x = -r2.x * r1.x + r1.z;
  r2.x = r1.y / r2.x;
  r2.y = r2.x + -r1.w;
  r2.x = cmp(r1.w < r2.x);
  r2.y = 12 * abs(r2.y);
  r2.y = min(1, r2.y);
  r2.y = 1 + -r2.y;
  r2.x = r2.x ? r2.y : 0;
  r0.w = r2.x + r0.w;
  r2.x = dot(float3(-0.419418007,-0.616038978,-0.419418007), r0.xyz);
  r2.x = r2.x + r2.x;
  r2.xy = r0.xy * -r2.xx + float2(-0.419418007,-0.616038978);
  r2.xy = r2.xy * ssaoScale + v1.xy;
  r2.x = depthSampler.Sample(depthSampler_s, r2.xy).x;
  r2.x = r2.x * 2 + -1;
  r2.x = -r2.x * r1.x + r1.z;
  r2.x = r1.y / r2.x;
  r2.y = r2.x + -r1.w;
  r2.x = cmp(r1.w < r2.x);
  r2.y = 12 * abs(r2.y);
  r2.y = min(1, r2.y);
  r2.y = 1 + -r2.y;
  r2.x = r2.x ? r2.y : 0;
  r0.w = r2.x + r0.w;
  r2.x = dot(float3(0.440452993,-0.639398992,0.440452993), r0.xyz);
  r2.x = r2.x + r2.x;
  r2.xy = r0.xy * -r2.xx + float2(0.440452993,-0.639398992);
  r2.xy = r2.xy * ssaoScale + v1.xy;
  r2.x = depthSampler.Sample(depthSampler_s, r2.xy).x;
  r2.x = r2.x * 2 + -1;
  r2.x = -r2.x * r1.x + r1.z;
  r2.x = r1.y / r2.x;
  r2.y = r2.x + -r1.w;
  r2.x = cmp(r1.w < r2.x);
  r2.y = 12 * abs(r2.y);
  r2.y = min(1, r2.y);
  r2.y = 1 + -r2.y;
  r2.x = r2.x ? r2.y : 0;
  r0.w = r2.x + r0.w;
  r2.x = dot(float3(-0.757088006,0.349334002,-0.757088006), r0.xyz);
  r2.x = r2.x + r2.x;
  r2.xy = r0.xy * -r2.xx + float2(-0.757088006,0.349334002);
  r2.xy = r2.xy * ssaoScale + v1.xy;
  r2.x = depthSampler.Sample(depthSampler_s, r2.xy).x;
  r2.x = r2.x * 2 + -1;
  r2.x = -r2.x * r1.x + r1.z;
  r2.x = r1.y / r2.x;
  r2.y = r2.x + -r1.w;
  r2.x = cmp(r1.w < r2.x);
  r2.y = 12 * abs(r2.y);
  r2.y = min(1, r2.y);
  r2.y = 1 + -r2.y;
  r2.x = r2.x ? r2.y : 0;
  r0.w = r2.x + r0.w;
  r2.x = dot(float3(0.574618995,0.685878992,0.574618995), r0.xyz);
  r2.x = r2.x + r2.x;
  r2.xy = r0.xy * -r2.xx + float2(0.574618995,0.685878992);
  r2.xy = r2.xy * ssaoScale + v1.xy;
  r2.x = depthSampler.Sample(depthSampler_s, r2.xy).x;
  r2.x = r2.x * 2 + -1;
  r2.x = -r2.x * r1.x + r1.z;
  r2.x = r1.y / r2.x;
  r2.y = r2.x + -r1.w;
  r2.x = cmp(r1.w < r2.x);
  r2.y = 12 * abs(r2.y);
  r2.y = min(1, r2.y);
  r2.y = 1 + -r2.y;
  r2.x = r2.x ? r2.y : 0;
  r0.w = r2.x + r0.w;
  r0.z = dot(float3(0.0385099985,-0.939059019,0.0385099985), r0.xyz);
  r0.z = r0.z + r0.z;
  r0.xy = r0.xy * -r0.zz + float2(0.0385099985,-0.939059019);
  r0.xy = r0.xy * ssaoScale + v1.xy;
  r0.x = depthSampler.Sample(depthSampler_s, r0.xy).x;
  r0.x = r0.x * 2 + -1;
  r0.x = -r0.x * r1.x + r1.z;
  r0.x = r1.y / r0.x;
  r0.y = cmp(r1.w < r0.x);
  r0.x = r0.x + -r1.w;
  r0.x = 12 * abs(r0.x);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = r0.y ? r0.x : 0;
  r0.x = r0.w + r0.x;
  r0.x = 0.25 * r0.x;
  r0.x = min(1, r0.x);
  r0.y = 1 + -ssaoStrength;
  o0.xyz = r0.xxx * r0.yyy + ssaoStrength;
  o0.w = 1;
  return;
}